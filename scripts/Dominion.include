#
#
# VARIABLES
# =========
#

# Number of cards in hand.
HANDSIZE=5;
# Size of columns of the decklist in pixels.
DECKBOX_SIZE=(20,220,110);
# minor version number for filter alogrithm
BOOK_FILTER_VERSION_MINOR=".0";
# default book sorting criteria.
BOOK_DEFAULT_SORT=("[age]","[cost]");

if(!port)
  port=29114;
if(server.name=="NO.DEFAULT.SERVER.FOR.THIS.GAME")
  server.name="gccg.servebeer.com";

product.image=(,);

game.bindings=(
  ("KeyControlKey1","{orange}Action Phase...",),
  ("KeyControlKey2","{orange}Play Treasures...",),
  ("KeyControlKey3","{orange}Buy Phase...",),
  ("KeyControlKey4","{orange}Clean-up Phase...",),);

# MENUS
# =====
GAME_MENU{"Current Deck Menu"}=(
 (1,"Add Copper","","EditAddCopper()"),
 (1,"Add Silver","","EditAddSilver()"),
 (1,"Add Gold","","EditAddGold()"),
 (1,"Add Platinum","","EditAddPlatinum()"),
 (1,"Add Estate","","EditAddEstate()"),
 (1,"Add Duchy","","EditAddDuchy()"),
 (1,"Add Province","","EditAddProvince()"),
 (1,"Add Colony","","EditAddColony()"),
 (1,"Add Potion","","EditAddPotion()"),
 (1,"Add Curse","","EditAddCurse()"),
 (1,"Add Kingdom","","EditAddKingdom()"),
 (1,"Add Kingdom0","","EditAddKingdom0()"),
 (1,"Add Kingdom1","","EditAddKingdom1()"),
 (1,"Add Kingdom2","","EditAddKingdom2()"),
 (1,"Add Kingdom3","","EditAddKingdom3()"),
 (1,"Add Kingdom4","","EditAddKingdom4()"),
 (1,"Add Kingdom5","","EditAddKingdom5()"),
 (1,"Add Kingdom6","","EditAddKingdom6()"),
 (1,"Add Kingdom7","","EditAddKingdom7()"),
 (1,"Add Kingdom8","","EditAddKingdom8()"),
 (1,"Add Kingdom9","","EditAddKingdom9()"),
 );

def CopperMenu
{
    Menu("copper",(
      ("Gain a Copper","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def SilverMenu
{
    Menu("silver",(
      ("Gain a Silver","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def GoldMenu
{
    Menu("gold",(
      ("Gain a Gold","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def PlatinumMenu
{
    Menu("platinum",(
      ("Gain a Platinum","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def PotionMenu
{
    Menu("potion",(
      ("Gain a Potion","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def EstateMenu
{
    Menu("estate",(
      ("Gain an Estate","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def DuchyMenu
{
    Menu("duchy",(
      ("Gain a Duchy","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def ProvinceMenu
{
    Menu("province",(
      ("Gain a Province","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def ColonyMenu
{
    Menu("colony",(
      ("Gain a Colony","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def CurseMenu
{
    Menu("curse",(
      ("Gain a Curse","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def KingdomMenu
{
    Menu("kingdom",(
      ("Shuffle","Ctrl+S",""),
      ("Play a Kingdom Card","Ctrl+P",""),
    ));
}

def Kingdom0Menu
{
    Menu("kingdom0",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom1Menu
{
    Menu("kingdom1",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom2Menu
{
    Menu("kingdom2",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom3Menu
{
    Menu("kingdom3",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom4Menu
{
    Menu("kingdom4",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom5Menu
{
    Menu("kingdom5",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom6Menu
{
    Menu("kingdom6",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom7Menu
{
    Menu("kingdom7",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom8Menu
{
    Menu("kingdom8",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}

def Kingdom9Menu
{
    Menu("kingdom9",(
      ("Gain this Kingdom Card","Ctrl+P",""),
      ("Reveal/Hide deck","Ctrl+F",""),
    ));
}
FILTER_OPTIONS=(,
);

# FUNCTIONS
# =========

#
# NewDeck() - Game specific creation of empty deck structure.
#
def NewDeck
{
  return((("deck",(,)),));
}

def EditAddCopper
{
  if(deck.name!=NULL)
  {
    if(has_entry("copper",decks{deck.name}))
      Msg("{red}copper already added.");
    else
    {
      decks{deck.name}{"copper"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddSilver
{
  if(deck.name!=NULL)
  {
    if(has_entry("silver",decks{deck.name}))
      Msg("{red}silver already added.");
    else
    {
      decks{deck.name}{"silver"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddGold
{
  if(deck.name!=NULL)
  {
    if(has_entry("gold",decks{deck.name}))
      Msg("{red}gold already added.");
    else
    {
      decks{deck.name}{"gold"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddPlatinum
{
  if(deck.name!=NULL)
  {
    if(has_entry("platinum",decks{deck.name}))
      Msg("{red}platinum already added.");
    else
    {
      decks{deck.name}{"platinum"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddPotion
{
  if(deck.name!=NULL)
  {
    if(has_entry("potion",decks{deck.name}))
      Msg("{red}potion already added.");
    else
    {
      decks{deck.name}{"potion"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddEstate
{
  if(deck.name!=NULL)
  {
    if(has_entry("estate",decks{deck.name}))
      Msg("{red}estate already added.");
    else
    {
      decks{deck.name}{"estate"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddDuchy
{
  if(deck.name!=NULL)
  {
    if(has_entry("duchy",decks{deck.name}))
      Msg("{red}duchy already added.");
    else
    {
      decks{deck.name}{"duchy"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddProvince
{
  if(deck.name!=NULL)
  {
    if(has_entry("province",decks{deck.name}))
      Msg("{red}province already added.");
    else
    {
      decks{deck.name}{"province"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddColony
{
  if(deck.name!=NULL)
  {
    if(has_entry("colony",decks{deck.name}))
      Msg("{red}colony already added.");
    else
    {
      decks{deck.name}{"colony"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddCurse
{
  if(deck.name!=NULL)
  {
    if(has_entry("curse",decks{deck.name}))
      Msg("{red}curse already added.");
    else
    {
      decks{deck.name}{"curse"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom",decks{deck.name}))
      Msg("{red}kingdom already added.");
    else
    {
      decks{deck.name}{"kingdom"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom0
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom0",decks{deck.name}))
      Msg("{red}kingdom0 already added.");
    else
    {
      decks{deck.name}{"kingdom0"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom1
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom1",decks{deck.name}))
      Msg("{red}kingdom1 already added.");
    else
    {
      decks{deck.name}{"kingdom1"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom2
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom2",decks{deck.name}))
      Msg("{red}kingdom2 already added.");
    else
    {
      decks{deck.name}{"kingdom2"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom3
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom3",decks{deck.name}))
      Msg("{red}kingdom3 already added.");
    else
    {
      decks{deck.name}{"kingdom3"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom4
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom4",decks{deck.name}))
      Msg("{red}kingdom4 already added.");
    else
    {
      decks{deck.name}{"kingdom4"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom5
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom5",decks{deck.name}))
      Msg("{red}kingdom5 already added.");
    else
    {
      decks{deck.name}{"kingdom5"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom6
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom6",decks{deck.name}))
      Msg("{red}kingdom6 already added.");
    else
    {
      decks{deck.name}{"kingdom6"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom7
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom7",decks{deck.name}))
      Msg("{red}kingdom7 already added.");
    else
    {
      decks{deck.name}{"kingdom7"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom8
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom8",decks{deck.name}))
      Msg("{red}kingdom8 already added.");
    else
    {
      decks{deck.name}{"kingdom8"}=(,);
      RefreshCurrentDeck();
    }
  }
}

def EditAddKingdom9
{
  if(deck.name!=NULL)
  {
    if(has_entry("kingdom9",decks{deck.name}))
      Msg("{red}kingdom9 already added.");
    else
    {
      decks{deck.name}{"kingdom9"}=(,);
      RefreshCurrentDeck();
    }
  }
}
#
# InitializeGame() - Game specific initialization of game variables.
#
def InitializeGame
{
}

#
# StartGame() - What to do when game begins.
#
def StartGame
{
  net_send(server,("UploadDeck",decks{deck.name}));
  net_send(server,("ShuffleDeck",deck));
}

#
# HOOKS
# =====

def SingleCardMenuHook
{
  return(
("Fill Kingdom0","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom0'})))"),
("Fill Kingdom1","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom1'})))"),
("Fill Kingdom2","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom2'})))"),
("Fill Kingdom3","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom3'})))"),
("Fill Kingdom4","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom4'})))"),
("Fill Kingdom5","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom5'})))"),
("Fill Kingdom6","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom6'})))"),
("Fill Kingdom7","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom7'})))"),
("Fill Kingdom8","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom8'})))"),
("Fill Kingdom9","Ctrl+Shift+0","Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom9'})))"),

);
}
#
# REDEFINED FUNCTIONS
# ===================
#
# PlayKeyControlKeyEnd() - Set aside from bottom
#
def PlayKeyControlKeyEnd
{
  Send("Transfer",(1,("deck",deck,length(deck(deck))-1),("active",me)))
}

def PlayKeyShiftControlKey0
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom0'})));
}
def PlayKeyShiftControlKey1
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom1'})));
}
def PlayKeyShiftControlKey2
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom2'})));
}
def PlayKeyShiftControlKey3
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom3'})));
}
def PlayKeyShiftControlKey4
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom4'})));
}
def PlayKeyShiftControlKey5
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom5'})));
}
def PlayKeyShiftControlKey6
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom6'})));
}
def PlayKeyShiftControlKey7
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom7'})));
}
def PlayKeyShiftControlKey8
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom8'})));
}
def PlayKeyShiftControlKey9
{
  Send('Transfer',(12,('out.of.play',card.number),('deck.top',deck.objects[me]{'kingdom9'})));
}
#
# ScoreToText(score structure) - Convert a score structure to string.
# 
def ScoreToText
{
  return("");
}


# MOUSE
# =====


# SPECIAL KEYS
# ============


# PLAYING CARDS
# =============


#
# LOCATION TABLES
# ===============

#
# InitializeLocationTables() - Fill tables for location algorithm (See Mtg.include for details).
#
def InitializeLocationTables
{
  rules.category=(
    ('type=="Action - Duration"',
      '("duration",name(card))'),
    ('type=="Action" || type=="Action - Attack" || type=="Action - Reaction" || type=="Action - Victory" || type=="Action - Prize" || type=="Action - Attack - Prize"',
      '("action",name(card))'),
    ('type=="Treasure" || type=="Treasure - Victory" || type=="Treasure - Reaction" || type=="Treasure - Prize"',
      '("treasure",name(card))'),
  );
  rules.coordinate=(
  (("duration",),(
     (("StacksByGroup",90,0,6,12,card.xstep+10,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  (("action",),(
     (("StacksByGroup",90,121,6,12,card.xstep+10,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  (("treasure",),(
     (("StacksByGroup",90,242,6,12,card.xstep+10,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  );
}