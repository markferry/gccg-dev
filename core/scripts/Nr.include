# VARIABLES
# =========
#
# agenda_points - my current agenda points
# bit_pool - my current bits in the bit pool
# brain_damage - my current brain damage
# tags - my current tags
# bad_publicity - amount of BP points
# bit_lock - set while waiting score update

BOOK_FILTER_VERSION_MINOR=".11";
HANDSIZE=5;
DECKBOX_SIZE=(20,220,110);
IMMOBILE_CARDS=(2,3,4);
STANDARD_DICE="1d6";
DELETE_TO_MINE=1;

BGCOLOR=(70,70,162);
FGCOLOR=(206,205,237);
BRCOLOR=(38,41,118);
BGCOLOR2=(73,71,114);
FGCOLOR2=(206,205,237);
BRCOLOR2=(50,49,95);
TXCOLOR=(255,255,255);
BKBGCOLOR=(73,71,114);
BKBRCOLOR=(206,205,237);

if(!port)
  port=61759;

product.image=(,);
product.image{"NetRunner Starter"}="netrunner_starter.jpg";
product.image{"NetRunner Booster"}="netrunner_booster.jpg";
product.image{"Proteus Booster"}="proteus_booster.jpg";
product.image{"Classic Booster"}="classic_booster.jpg";

if(server.name=="NO.DEFAULT.SERVER.FOR.THIS.GAME")
  server.name="lakka.kapsi.fi";

BOOK_DEFAULT_SORT=("[age]","C[name]");

FILTER_OPTIONS=(
 ("Corporation","Attr('faction',#)=='Corp'",(1,"[card_type]","C[name]")),
 ("Runner","Attr('faction',#)=='Runner'",(1,"[card_type]","C[name]")),
 "{hr}",
 ("Agenda","Attr('card_type',#)=='Agenda'",(1,"N[agenda]","C[name]")),
 ("Ice","Attr('card_type',#)=='Ice'",(1,"[ice_type]","N[strength]","[strength]","[cost]","C[name]")),
 ("Node","Attr('card_type',#)=='Node'",(1,"N[cost]","C[name]")),
 ("Operation","Attr('card_type',#)=='Operation'",(1,"N[cost]","C[name]")),
 ("Upgrade","Attr('card_type',#)=='Upgrade'",(1,"N[cost]","C[name]")),
 "{hr}",
 ("Hardware","Attr('card_type',#)=='Hardware'",(1,"N[cost]","C[name]")),
 ("Prep","Attr('card_type',#)=='Prep'",(1,"N[cost]","C[name]")),
 ("Program","Attr('card_type',#)=='Program'",(1,"[memory_use]","[cost]","C[name]")),
 ("Resource","Attr('card_type',#)=='Resource'",(1,"N[cost]","C[name]")),
 "{hr}",
 ("Sealed deck (Corp)","first(book_entry(card.book,#))&&Attr('faction',#)=='Corp'",(1,"[card_type]","C[name]")),
 ("Sealed deck (Runner)","first(book_entry(card.book,#))&&Attr('faction',#)=='Runner'",(1,"[card_type]","C[name]")),
 "{hr}",
);

game.bindings=(
  ("KeyControlKey1","{orange}Action 1...",),
  ("KeyControlKey2","{orange}Action 2...",),
  ("KeyControlKey3","{orange}Action 3...",),
  ("KeyControlKey4","{orange}Action 4...",),
  ("KeyControlKey5","{orange}Extra Action...",),);

# MENUS
# =====

MENU{"Main Menu - Play"}=(
	(1,"Unbind a key binding","/unbind",""),
	(1,"{hr}","",""),
	(1,"Jack-In","/jackin",""),
	(1,"Start of my turn","Ctrl+U",""),
	(1,"End of my turn","Ctrl+E",""),
	(1,"Roll dice","Ctrl+R",""),
	(1,"Flip a coin","Ctrl+C",""),
	(1,"Select counter color...","","CounterSubmenu()"),
	(1,"{hr}","",""),
	(1,"Declare win","/win",""),
	(1,"Declare loss","/lose",""),
	(1,"Declare draw","/draw",""),
	(1,"Declare undecided","/undecided",""),
	(1,"Accept result","/ok",""),
	(1,"{hr}","",""),
	(1,"Show/Hide deck","","set_attr(deck.box,'visible',!get_attr(deck.box,'visible'))"),
	(1,"Show/Hide collection","Ctrl+B",""),
	(1,"Save game","/savegame",""),
	(1,"Load game","/loadgame",""),
	(1,"Delete saved game","/delgame",""),
	);

	
	
GAME_MENU{"Main Menu - Play"}=(
 (1,"{hr}","",""),
 (1,"Add 1 Agenda","/ag +1",""),
 (1,"Del 1 Agenda","/ag -1",""),
 (1,"Add 1 Brain Damage","/bd +1",""),
 (1,"Del 1 Brain Damage","/bd -1",""),
 (1,"Add 1 Tag","/tg +1",""),
 (1,"Del 1 Tag","/tg -1",""),
 (1,"Add 1 Bad Publicity","/bp +1",""),
 (1,"Del 1 Bad Publicity","/bp -1",""),
 );

 
def HiddenPileMenu
{
    Menu("Hidden discard pile",(
      ("Look","Ctrl+L",""),
      ("Shuffle","Ctrl+S",""),
      ("Reveal/Hide","Ctrl+F",""),
      ("Shuffle to the deck","",'Send("Transfer",(length(deck(deck.objects[me]{"hidden pile"})),("deck.top",deck.objects[me]{"hidden pile"}),("deck.top",deck))); Send("ShuffleDeck",deck);'),
      ("Move to public pile","",'Send("Transfer",(length(deck(deck.objects[me]{"hidden pile"})),("deck.top",deck.objects[me]{"hidden pile"}),("deck.top",discard)))'),
      ("Touch","Ctrl+T",""),
    ));
}

def HQMenu
{
    Menu("HQ data fort",(
      ("Touch","Ctrl+T",""),
      ("Add 1 bit","Ctrl+A",""),
      ("Del 1 bit","Ctrl+D",""),
    ));
}

def ArchiveMenu
{
    Menu("Archive data fort",(
      ("Touch","Ctrl+T",""),
    ));
}

def RDMenu
{
    Menu("R&D data fort",(
      ("Touch","Ctrl+T",""),
    ));
}

def SingleCardMenuHook
{
  push(m);

  m=(("Put to hidden archive","Alt+Delete",""),);

  if(ARG=="inplay")
	m=m+(("Rez card","Ctrl+Z",""),);

  return(m);
  m=pop();
}

# UTILITY
# ========
def DrawCards
{
 if(length(ARG))
	Send("Transfer",(ARG,("deck.top",deck),("hand",me)));
 else
    Msg("{red}Missing DrawCards arguments.");	
}

def GainBits
{
 return(0);
 if(length(ARG))
 {
  if (flag.playing)
  {
    push(i);
    i=toint(ARG);   
    if(substr(ARG,0,1)=="+" && tostr(i)==substr(ARG,1)) 
    {
      Send("AddMarker",(BitPool(),7,i));
      bit_pool=bit_pool+i;
      RefreshScore();
      return(1);
    }
    else if(substr(ARG,0,1)=="-" && tostr(i)==ARG)
    {
      Send("DelMarker",(BitPool(),7,-i));
      bit_pool=bit_pool+i;
      if(bit_pool < 0)
        bit_pool=0;
      RefreshScore();
      return(1);
    }

    i=pop();
  }
 }
 else
    Msg("{red}Missing GainBits arguments.");	
}

def AddCounters
{
 return(0);
 if (object.number==BitPool())
 {
	GainBits(ARG);
 }
 else if(length(ARG))
 {
  if (flag.playing)
  {
    push(i);
    i=toint(ARG);   
    if(substr(ARG,0,1)=="+" && tostr(i)==substr(ARG,1)) 
    {
      Send("AddMarker",(object.number,player.marker_color,i));
      return(1);
    }
    else if(substr(ARG,0,1)=="-" && tostr(i)==ARG)
    {
      Send("DelMarker",(object.number,player.marker_color,-i));
      return(1);
    }
	i=pop();
  }
 }
 else
    Msg("{red}Missing AddCounters arguments.");	
	
}

		



# BASIC FUNCTIONS
# ===============

#
# NewDeck() - Game specific creation of empty deck structure.
#
def NewDeck
{
  return((("deck",(,)),));
}

#
# InitializeGame() - Game specific initialization of game variables.
#
def InitializeGame
{
  agenda_points=0;
  bit_pool=0;
  brain_damage=0;
  bad_publicity=0;
  tags=0;
  player_faction="corp";
  bit_lock=0;
}

#
# StartGame() - What to do when game begins.
#
def StartGame
{
  Send("Transfer",(1,("out.of.play",3),("table",-200,0,0,0)));
  Send("Transfer",(1,("out.of.play",2),("table",-200,0,0,0)));
  Send("Transfer",(1,("out.of.play",4),("table",-200,0,0,0)));
  Send("Transfer",(1,("out.of.play",5),("table",-200,0,0,0)));
  net_send(server,("UploadDeck",decks{deck.name}));
  net_send(server,("ShuffleDeck",deck));
}

#
# ScoreHook(player,scorestruct)
#
def ScoreHook
{
  if(ARG[0]==me)
  {
     push(s);
     s=ARG[1];
     if(s{"A"}!=NULL)
       agenda_points=toint(s{"A"});
     if(s{"D"}!=NULL)
       brain_damage=toint(s{"D"});
     if(s{"G"}!=NULL)
       tags=toint(s{"G"});
     if(s{"P"}!=NULL)
       bad_publicity=toint(s{"P"});
     if(s{"T"}!=NULL)
       player_faction=s{"T"};

     if(bit_lock)
       bit_lock=bit_lock-1;

     if(bit_lock==0)
     {
       if(s{"B"}!=NULL)
         bit_pool=s{"B"};
     }

     s=pop();
  }
}

#
# ScoreToText(score structure) - Convert a score structure to string.
# 
def ScoreToText
{
  push(s);
  s="";

  s=s+"Bits "+ARG{"B"};
  if(ARG{"A"})
  {
    s="Ag. "+ARG{"A"}+" "+s;
  }
  if(ARG{"D"})
  {
    s="Dmg. "+ARG{"D"}+" "+s;
  }
  if(ARG{"G"})
  {
    s="Tags "+ARG{"G"}+" "+s;
  }
  if(ARG{"P"})
  {
    s="BadP. "+ARG{"P"}+" "+s;
  }
  return(s);
  s=pop();
}

#
# GAME FUNCTIONS
# ==============

#
# Faction(player) - Get the faction of the player if known.
#
def Faction
{
  return (score.raw[ARG]{"T"});
}

#
# BitPool() - Return object number of my bit bank.
#
def BitPool
{
  if(Faction(me)=="runner")
    return(first(select('card(#)==5',inplay(me))));
  else
    return(first(select('card(#)==2',inplay(me))));
}

#
# RefreshScore() - Send a score update.
#
def RefreshScore
{
  Send("Score",(me,(("A",agenda_points),("B",bit_pool),("D",brain_damage),("G",tags),("P",bad_publicity),("T",Faction(me)))));
}

#
# HOOKS
# =====

# 
# InputHook(input) - Handle +/- adjustment for bits.
#
def InputHook
{
  push(i);
  if ((substr(ARG,1,1)=="c") || (substr(ARG,1,1)=="C")) 
		i = AddCounters(substr(ARG,0,1)+substr(ARG,2,length(ARG)-2));
	else
		i = GainBits(ARG);
  return(i);
  i=pop();
}


#
# PutTable(object number,x,y,orientation,card number,player,real card number) - Tap ice.
#
def PutTableHook
{
  push(t);
  t=Attr("card_type",ARG[6]);
  if(t=="Ice")
    Send("Rotate",(ARG[0],90));
  t=pop();
}

#
# OVERRIDED FUNCTIONS
# ===================

def PlayCardKeyControlKeyZ
{
  	
  push(c);
  c=CheckForCard();
  if((c==NULL) || (!object.number))
  {
		Msg("Cannot rez this card!!?*!");
  }
  else
  {
	push(ccost);
	ccost=toint(Attr("cost",c));
	if (bit_pool>=ccost)
	{
		GainBits("-"+tostr(ccost));
		Send("Flip",object.number);
		if (length(Attr("rez_counters",c)))
			AddCounters("+"+Attr("rez_counters",c));	
	}
	else
	{
		Msg("{red}Not enought bits in bit pool to rez:{orange} " + name(c));
	}
	ccost=pop();
	
	
  }
   c=pop();
}

# Say("name:"+name(c) + " cost:"+Attr("cost",c) + " type:"+Attr("card_type",c));



def KeyControlKeyR
{
  Send("Roll","1d6");
}

def PlayKeyAltKeyDelete
{
  if(card.number!=NULL)
  {
    TryTransferTo("deck.top", deck.objects[me]{"hidden pile"});
  }
}

def PlayHandKeyDelete
{
  if(player_faction=="corp")
  {
    if(card.number!=NULL)
      TryTransferTo("deck.top", deck.objects[me]{"hidden pile"});
  }
  else
    PlayKeyDelete();
}

def PlayCardKeyDelete
{
  if(card.number!=NULL)
  {
    if(card.number==1 && player_faction=="corp")
      TryTransferTo("deck.top", deck.objects[me]{"hidden pile"});
    else
      PlayKeyDelete();
  }
}

def PlayKeyControlKeyA
{
  if(object.number)
  {
    if(player.marker_color==7 && (card.number==2 || card.number==5))
    {
      if(Owner(object.number)==me)
      {
        Send("AddMarker",(object.number,7));
        bit_pool=bit_pool+1;
        bit_lock=bit_lock+1;
        RefreshScore();
      }
    }
    else
      Send("AddMarker",(object.number,player.marker_color));
  }
}

def PlayKeyControlKeyD
{
  if(object.number)
  {
      if(player.marker_color==7 && (card.number==2 || card.number==5))
      {
        if(Owner(object.number)==me)
        {
          Send("DelMarker",(object.number,7));
          if(bit_pool > 0)
          {
            bit_pool=bit_pool-1;
            bit_lock=bit_lock+1;
            RefreshScore();
          }
        }
      }
      else
      {
        push(c);
        c=(object_data(object.number))[6];
        if(c{player.marker_color}>0 || (card.number==2 || card.number==5))
          Send("DelMarker",(object.number,player.marker_color));
        else
        {
          c=select("(#)[1]>0",c);
          if(length(c)>0)
            Send("DelMarker",(object.number,(first(c))[0]));
        }
        c=pop();
      }
  }
}

def MouseLeftClickHand
{
  if(length(hand(hand[me])) && card.number)
  {
    ClearSearchbox();
    push(f);
    push(t);
    t=Attr("card_type",card.number);
    f=1;
    if(t=="Operation" || t=="Prep" || t=="Hardware" || t=="Program" || t=="Resource")
      f=0;
    Send("Transfer",(1,("hand",me,hand.card_index),("play",f)));
    t=pop();
    f=pop();
  }
}

#
# MouseLeftClickHand() - Default to face down.
#
def MouseLeftClickHand
{
  if(length(hand(hand[me])) && card.number)
  {
    ClearSearchbox();
    push(f);
    push(t);
    push(played);
	played=1;
    t=Attr("card_type",card.number);
    f=1;
	
	 if(t=="Hardware" || t=="Program" || t=="Resource")
      {
	    f=0;	  
	  }

	
	if(t=="Operation" || t=="Prep")
	  {
	   push(c);
	   c=Attr("cost",card.number);
   
	  if (toint(c)<=bit_pool)
	    {
		  f=0;		
		  if(toint(c)>0)
			GainBits("-"+c);
	    }
	  else
		{
			Msg("{red}Not enough bits in bit pool to play: {orange}" + card.name);
			played=0;
		}
	   c=pop();
	  }

   
	if (played)
	{
		Send("Transfer",(1,("hand",me,hand.card_index),("play",f)));
		push(s1);
		s1=Attr("play_effect_gain",card.number);
		if (length(s1))
		{
			GainBits("+"+s1);
		}		
		s1=pop();

		push(s2);
		s2=Attr("play_effect_draw",card.number);
		if (length(s2))
		{
			DrawCards(s2);
		}		
		s2=pop();
	}

	played=pop();
    t=pop();
    f=pop();
  }
}




#
# MouseMiddleClickHand() - Play card face down.
#
def MouseMiddleClickHand
{
  if(length(hand(hand[me])))
  {
    ClearSearchbox();
    TryTransferTo("play",1);
  }
}


# SPECIAL KEYS
# ============

def KeyShiftControlKeyT
{
    Input("{T}");
}
def KeyShiftControlKeyA
{
    Input("{A}");
}
def KeyShiftControlKeyS
{
    Input("{S}");
}

def PlayKeyControlKeyU
{  
  if(Faction(me)=="corp")
  {
	Say("{magenta}Start of Turn:{orange} Draw a card");  
	DrawCards(1);
  }
  else
  {
	Say("{magenta}Start of Turn");  
  }
  GrabTimer();
}

def KeyShiftControlKey0
{
  Input("{0}");  
}
def KeyShiftControlKeyF1
{
  Input("{1}");  
}
def KeyShiftControlKeyF2
{
  Input("{2}");  
}
def KeyShiftControlKeyF3
{
  Input("{3}");  
}
def KeyShiftControlKeyF4
{
  Input("{4}");  
}
def KeyShiftControlKeyF5
{
  Input("{5}");  
}
def KeyShiftControlKeyF6
{
  Input("{6}");  
}
def KeyShiftControlKeyF7
{
  Input("{7}");  
}
def KeyShiftControlKeyF8
{
  Input("{8}");  
}
def KeyShiftControlKeyF9
{
  Input("{9}");  
}
def KeyShiftControlKeyF10
{
  Input("{10}");  
}
def KeyShiftControlKeyF11
{
  Input("{11}");  
}
def KeyShiftControlKeyF12
{
  Input("{12}");  
}

def KeyShiftKeyF1
{
  Input("{1}");  
}
def KeyShiftKeyF2
{
  Input("{2}");  
}
def KeyShiftKeyF3
{
  Input("{3}");  
}
def KeyShiftKeyF4
{
  Input("{4}");  
}
def KeyShiftKeyF5
{
  Input("{5}");  
}
def KeyShiftKeyF6
{
  Input("{6}");  
}
def KeyShiftKeyF7
{
  Input("{7}");  
}
def KeyShiftKeyF8
{
  Input("{8}");  
}
def KeyShiftKeyF9
{
  Input("{9}");  
}
def KeyShiftKeyF10
{
  Input("{10}");  
}
def KeyShiftKeyF11
{
  Input("{11}");  
}
def KeyShiftKeyF12
{
  Input("{12}");  
}





# COMMANDS
# ========

def PlayCommandAg
{
  if(length(ARG))
  {
    agenda_points=agenda_points+toint(ARG[0]);
    Say("{orange}Added "+toint(ARG[0])+" agenda points and having now total "+agenda_points+".");
    RefreshScore();
  }
  else
    Msg("{red}Missing arguments.");
}

HELP{"play"}{"ag"}=("n","modify agenda score",NULL,
"Add (or subtract if negative) a number {yellow}n{white} from your agenda score.");

def PlayCommandBd
{
  if(length(ARG))
  {
    brain_damage=brain_damage+toint(ARG[0]);
    Say("{orange}Added "+toint(ARG[0])+" brain damage and having now total "+brain_damage+".");

    RefreshScore();
  }
  else
    Msg("{red}Missing arguments.");
}

HELP{"play"}{"jackin"}=("","draw 5, gain 5 bits",NULL,
"draw 5 cards, gain 5 bits.");

def PlayCommandJackin
{
  GainBits("+5");
  DrawCards(HANDSIZE);
}


HELP{"play"}{"tg"}=("n","add tag",NULL,
"Add (or subtract if negative) a number {yellow}n{white} from your tags.");

def PlayCommandTg
{
  if(length(ARG))
  {
    tags=tags+toint(ARG[0]);
    Say("{orange}Added "+toint(ARG[0])+" tags and having now total "+tags+".");
    RefreshScore();
  }
  else
    Msg("{red}Missing arguments.");
}


HELP{"play"}{"bd"}=("n","add brain damage",NULL,
"Add (or subtract if negative) a number {yellow}n{white} from your brain damage score.");

def PlayCommandBp
{
  if(length(ARG))
  {
    bad_publicity=bad_publicity+toint(ARG[0]);
    Say("{orange}Added "+toint(ARG[0])+" bad publicity and having now total "+bad_publicity+".");

    RefreshScore();
  }
  else
    Msg("{red}Missing arguments.");
}

HELP{"play"}{"bp"}=("n","add bad publicity",NULL,
"Add (or subtract if negative) a number {yellow}n{white} from your bad publicity score.");

# PLAYING CARDS
# =============

def PlayOperation
{
  Send("Transfer",(1,("play",ARG[0],0),("deck.top",discard)));
}

def PlayPrep
{
	 Send("Transfer",(1,("play",ARG[0],0),("deck.top",discard)));
}

#
# LOCATION TABLES
# ===============

#
# InitializeLocationTables() - Fill tables for location algorithm (See Mtg.include for details).
#

def InitializeLocationTables
{
  rules.category=(
  ('findspace.facedown && (card_type=="Program" || card_type=="Resource" || card_type=="Hardware")',
    '("facedown","all")'),
  ('card_type=="Program"',
    '("program","all")'),
  ('card_type=="Resource"',
    '("resource","all")'),
  ('card_type=="Hardware"',
    '("hardware","all")'),
  ('card_type=="Ice"',
    '("ice","all")'),
  ('card_type=="Upgrade" || card_type=="Agenda" || card_type=="Node"',
    '("fort","all")'),
  );

  rules.coordinate=(
  (("program",),(
     (("StacksByGroup",8,8,card.xstep+12,0,0,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  (("resource",),(
     (("StacksByGroup",250,220,card.xstep+12,0,0,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  (("hardware",),(
     (("StacksByGroup",527,40,card.xstep+12,0,0,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  (("ice",),(
     (("RandomNearPoint",700,-40),),
     (,)
  )),
  (("fort",),(
     (("StacksByGroup",440,200,card.xstep+42,0,0,0),),
     (("AutoRaiseGroupTail","yes"),)
  )),
  );
}
