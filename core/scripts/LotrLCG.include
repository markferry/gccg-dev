#
#
# VARIABLES
# =========
#

# Number of cards in hand.
HANDSIZE=6;
# Size of columns of the decklist in pixels.
DECKBOX_SIZE=(20,220,110);
# minor version number for filter alogrithm
BOOK_FILTER_VERSION_MINOR=".0";
# default book sorting criteria.
BOOK_DEFAULT_SORT=("[age]","N[number]");

if(!port)
  port=29114;
if(server.name=="NO.DEFAULT.SERVER.FOR.THIS.GAME")
  server.name="gccg.servebeer.com";

product.image=(,);

game.bindings=(
  ("KeyControlKey1","{orange}1. Resource phase..."),
  ("KeyControlKey2","{orange}2. Planing phase..."),
  ("KeyControlKey3","{orange}3. Quest phase..."),
  ("KeyControlKey4","{orange}4. Travel phase..."),
  ("KeyControlKey5","{orange}5. Encounter phase..."),
  ("KeyControlKey6","{orange}6. Combat phase..."),
  ("KeyControlKey7","{orange}7. Refresh phase..."),);

if(options{"discard_attached"}==NULL)
  options{"discard_attached"}="yes";

# MENUS
# =====

FILTER_OPTIONS=(
 ("Cards by Name","1",(0,"[name]")),
 ("Cards by Type","1",(1,"[type]")),
 ("Cards by Sphere","Attr('type',#)!='Enemy' && Attr('type',#)!='Location' && Attr('type',#)!='Treachery' && Attr('type',#)!='Objective' && Attr('type',#)!='Quest'",(1,"[sphere]")),
 ("Quests","Attr('type',#)=='Quest'",(2,"[age]","[scenario_title]","[sequence]")), 
 ("Encounter Sets","Attr('encounter_set',#)!=''",(1,"[encounter_set]")), 
);

GAME_MENU{"Current Deck Menu"}=(
 (1,"{hr}","",""),
 (1,"Create scenario deck","","CreateScenario()"),
 );

GAME_MENU{"Main Menu - Play"}=(
 (1,"{hr}","",""),
 (1,"Select scenario...","","SelectScenarioMenu()"),
 );

#
# SelectScenarioMenu() - Provide a list of scenarios to play.
#
def SelectScenarioMenu
{
  push(d);
  push(s);
  s=(,);
  for(d)(decks())
  {
    if(find("scenario",lc(d)))
      s=s+((d,"",'ImportScenario('+tostr(d)+')'),);
  }
  Submenu("Select Scenario",s);
  s=pop();
  d=pop();
}

#
# ImportScenario(file) - Import a deck and setup scenario.
#
def ImportScenario
{
  push(d);
  d=load_deck(ARG);
  d=ImportDeck(d);
  Send("SetScenario",(ARG,d{'encounter'},reverse(sort_by('[sequence]',d{'quest'},0))));
  d=pop();
}

def SingleCardMenuHook
{
  push(m);
  push(n1);
  push(n2);
  if(me==0)
  {
    n1='quest';
    n2='encounter deck';
  }
  else
  {
    n1='opponent quest';
    n2='opponent encounter deck';
  }

  m=(("Put to quest deck","","TryTransferTo('deck.top',"+deck.objects[0]{n1}+")"),
     ("Put to encounter deck","","TryTransferTo('deck.top',"+deck.objects[0]{n2}+")"),);

  return(m);
  n2=pop();
  n1=pop();
  m=pop();
}

# FUNCTIONS
# =========

#
# NewDeck() - Game specific creation of empty deck structure.
#
def NewDeck
{
  return((("deck",(,)),));
}

#
# CreateScenario() - Create scenario deck.
#
def CreateScenario
{
    decks{deck.name}=(,);  
    decks{deck.name}{"quest"}=(,);  
    decks{deck.name}{"encounter"}=(,);  
    RefreshCurrentDeck();
}

#
# InitializeGame() - Game specific initialization of game variables.
#
def InitializeGame
{
}

#
# StartGame() - What to do when game begins.
#
def StartGame
{
  net_send(server,("UploadDeck",decks{deck.name}));
  net_send(server,("ShuffleDeck",deck));

  push(s);
  push(i);
  push(t);
  i=0;
  s=select('Attr("type",#)=="Hero"',decks{deck.name}{"deck"});  
  forall('i=i+toint(Attr("threat_cost",#))',s);
  t=(,);
  t{'Threat'}=i;
  Send("Score",(me,t));
  forall('Send("Transfer",(1,("deck.search",deck.objects[me]{"deck"},#),("play",0)))',s);
  t=pop();
  i=pop();
  s=pop();
}

#
# HOOKS
# =====

def MouseLeftClickQuest
{
  PlayKeyControlKeyL();
}

def MouseLeftClickOpponentQuest
{
  MouseLeftClickQuest();
}

def MouseLeftClickQuestSearchBoxHook
{
  TryTransferTo("play",1);
  KeyEscape();
}

def MouseLeftClickOpponentQuestSearchBoxHook
{
  MouseLeftClickQuestSearchBoxHook();
}

def MouseLeftClickEncounterDeck
{
  TryTransferTo("play",0);
}

def MouseLeftClickOpponentEncounterDeck
{
  MouseLeftClickEncounterDeck();
}

def MouseMiddleClickEncounterDeck
{
  TryTransferTo("play",1);
}

def MouseMiddleClickOpponentEncounterDeck
{
  MouseMiddleClickEncounterDeck();
}

def TryTransferHook
{
    if( card_back(card.number)==1 && ((ARG==("deck.top",deck) || ARG==("deck.bottom",deck))) )
	return(ARG[0],deck.objects[me]{"encounter deck"});
    else if( card_back(card.number)==1 && ((ARG==("deck.top",deck.objects[me]{"discard pile"}) || ARG==("deck.bottom",deck.objects[me]{"discard pile"}))) )
	return(ARG[0],deck.objects[me]{"encounter discard"});
    else if( Attr("type",card.number)=="Quest" && (ARG==("deck.top",deck) || ARG==("deck.bottom",deck) || ARG==("deck.top",deck.objects[me]{"discard pile"}) || ARG==("deck.bottom",deck.objects[me]{"discard pile"})) )
	return(ARG[0],deck.objects[me]{"quest"});
    else 
	return(ARG);
}

def EndOfTurnHook
{
  push(s);
  s=score.raw[me];
  s{'Threat'}=s{'Threat'}+1;
  Msg("{yellow}" + username + "'s threat count increased by 1");
  Send("Score",(me,s));
  s=pop();
}

def InputHook
{
  push(s);
  s=score.raw[me];
  if(flag.playing && substr(ARG,0,1)=="+" && tostr(toint(ARG))==substr(ARG,1)) 
  {
    Msg("{yellow}" + username + "'s threat count increased by " + substr(ARG,1));
    s{'Threat'}=s{'Threat'}+toint(ARG);
    Send("Score",(me,s));
    return(1);
  }
  else if(flag.playing && substr(ARG,0,1)=="-" && tostr(toint(ARG))==ARG)
  {
    Msg("{yellow}" + username + "'s threat count decreased by " + substr(ARG,1));
    s{'Threat'}=s{'Threat'}+toint(ARG);
    Send("Score",(me,s));
    return(1);
  }
  else
    return(0);
  s=pop();
}

def PlayQuestMenu
{
  Menu("Quest Deck",(
   ("Look at your quest","Ctrl+L",""),
  ));
}

def PlayEncounterDiscardMenu
{
  Menu("Encounter Discard",(
   ("Look at encounter discard","Ctrl+L",""),
  ));
}

def PlayEncounterDeckMenu
{
  Menu("Encounter Deck",(
   ("Play {blue}"+card.name,"left click",""),
   ("Play {blue}"+card.name+"{black} face down","middle click","TryTransferTo('play',1)"),
   ("Look at your quest","Ctrl+L",""),
  ));
}

def MouseLeftClickQuestCard
{
	Send("AddMarker",(object.number,1));
}

def MouseLeftClickLocationCard
{
	Send("AddMarker",(object.number,1));
}

def MouseLeftClickEnemyCard
{
	Send("AddMarker",(object.number,0));
}

def MouseLeftClickHeroCard
{
	Send("AddMarker",(object.number,0));
}

def MouseLeftClickAllyCard
{
	Send("AddMarker",(object.number,0));
}

#
# Hmm, do we want to take the burden of keeping this up to date...
#
def PutTableHook_tmp
{
    if(name(ARG[4])=="Flies and Spiders")
    {
		Send("Transfer",(1,("deck.search",deck.objects[me]{"encounter deck"},first(select('name(#)=="Forest Spider"',decks{deck.name}{"encounter deck"}))),("play",0)));
		Send("Transfer",(1,("deck.search",deck.objects[me]{"encounter deck"},first(select('name(#)=="Old Forest Road"',decks{deck.name}{"encounter deck"}))),("play",0)));
		Send("ShuffleDeck",deck.objects[me]{"encounter deck"});
	}
    else if(name(ARG[4])=="To the River...")
    {
		Send("Transfer",(1,("deck.top",deck.objects[me]{"encounter deck"}),("play",0)));
		Send("Transfer",(1,("deck.search",deck.objects[me]{"encounter deck"},first(select('name(#)=="Hill Troll"',decks{deck.name}{"encounter deck"}))),("play",0)));
		Send("ShuffleDeck",deck.objects[me]{"encounter deck"});
	}	
    else if(name(ARG[4])=="The Necromancer's Tower")
    {
		Send("Transfer",(3,("deck.search",deck.objects[me]{"encounter deck"},select('Attr("type",#)=="Objective"',decks{deck.name}{"encounter deck"})),("play",0)));
		Send("ShuffleDeck",deck.objects[me]{"encounter deck"});
	}	
}


#
# REDEFINED FUNCTIONS
# ===================

#
# ScoreToText(score structure) - Convert a score structure to string.
# 
def ScoreToText
{
  return("Threat: "+ARG{'Threat'});
}

# MOUSE
# =====


# SPECIAL KEYS
# ============

# PLAYING CARDS
# =============

#
# PutTable(object number,x,y,orientation,card number,player,real card number) - Tap encounters.
#
def PutTableHook
{
  push(t);
  t=Attr("type",ARG[6]);
  if(t=="Enemy" || t=="Location" || t=="Objective")
  {
    if(me % 2 == 0)
      Send("Rotate",(ARG[0],90));
    else
      Send("Rotate",(ARG[0],270));
    add_text(ARG[0],STRING_KEEP_TAPPED);
  }
  t=pop();
}

#
# LOCATION TABLES
# ===============

#
# InitializeLocationTables() - Fill tables for location algorithm (See Mtg.include for details).
#
def InitializeLocationTables
{
  rules.category=(
	('type=="Hero" || type=="Ally"','("characters","")'),
	('type=="Enemy" || type=="Location" || type=="Objective"','("encounters","")'),
	('type=="Treachery"','("treacheries","")'),
	('type=="Quest"','("quests","")'),
  );

  if(players==1)
    rules.coordinate=(
      (("characters",),((("StacksByGroup",card.xstep+30,BASE_TABLE_HEIGHT/2-card.ystep-10,(card.xstep*14)/10,0,0,0),),(,))),
      (("encounters",),((("StacksByGroup",BASE_TABLE_WIDTH-card.xstep-10,-(3*card.ystep)/2,-(card.xstep*14)/10,0,0,0),),(,))),
    );

  if(players>1)
    rules.coordinate=(
      (("characters",),((("StacksByGroup",card.xstep+30,BASE_TABLE_HEIGHT/2-card.ystep-10,(card.xstep*14)/10,0,0,0),),(,))),
      (("encounters",),((("StacksByGroup",BASE_TABLE_WIDTH-(5*card.xstep)/2,-card.ystep/2,-(card.xstep*14)/10,0,0,0),),(,))),
    );


}
