#
# Variables:
#
# promo.booster - remaining tenth anniversary "promo" cards to give as prizes
# promo.booster2 - remaining fractured time "promo" cards to give as prizes
# promo.booster3 - remaining reflections "promo" cards to give as prizes
# promo.booster4 - remaining archive portrait "promo" cards to give as prizes
# promo.booster5 - remaining genesis "promo" cards to give as prizes
# promo.booster6 - remaining virtual promo "promo" cards to give as prizes

if(!port)
  port=29160;
factory.port=29161;

INITIAL_MONEY=50.0;
GAME_BONUS=20.0;
BET_BONUS_MULTIPLIER=1;
LOSER_PERCENTAGE=0.20;

if(!load("products"))
{
  products=(,);
  products{"Federation Premiere starter"}=(50000,11.00,("2E","Federation",),50000);
  products{"Romulan Premiere starter"}=(50000,11.00,("2E","Romulan",),50000);
  products{"Klingon Premiere starter"}=(50000,11.00,("2E","Klingon",),50000);
  products{"DeepSpaceNine Premiere starter"}=(50000,11.00,("2E","DeepSpaceNine",),50000);
  products{"Second Edition Booster"}=(50000,2.0,("2E","Booster"),50000);
  products{"Energized Booster"}=(50000,2.0,("EN","Booster"),50000);
  products{"Call to Arms Booster"}=(50000,2.0,("CA","Booster"),50000);
  products{"Dominion starter"}=(50000,11.00,("CA","Dominion",),50000);
  products{"Borg starter"}=(50000,11.00,("CA","Borg",),50000);
  products{"Necessary Evil Booster"}=(50000,2.0,("NE","Booster"),50000);
  products{"Strange New Worlds Booster"}=(50000,2.0,("SW","Booster"),50000);
  products{"To Boldly Go Booster"}=(50000,2.0,("BG","Booster"),50000);
  products{"Captain's Log Booster"}=(50000,2.0,("CL","Booster"),50000);
  products{"These Are The Voyages Booster"}=(50000,2.0,("TV","Booster"),50000);
  products{"In a Mirror Darkly Booster"}=(50000,2.0,("MD","Booster"),50000);
  products{"What You Leave Behind Booster"}=(50000,2.0,("WB","Booster"),50000);
  products{"The Undiscovered Country Virtual"}=(50000,20.0,("UC","Virtual"),50000);
  products{"Favor The Bold Virtual"}=(50000,20.0,("FB","Virtual"),50000);
  products{"Raise The Stakes Virtual"}=(50000,20.0,("RS","Virtual"),50000);
  products{"This Side of Paradise Virtual"}=(50000,20.0,("TP","Virtual"),50000);
  products{"Legacy Virtual"}=(50000,7.0,("L","Virtual"),50000);
  products{"Allegiance Virtual"}=(50000,20.0,("A","Virtual"),50000);
  products{"Infinite Diversity Virtual"}=(50000,10.0,("ID","Virtual"),50000);
  products{"Peak Performance Virtual"}=(50000,25.0,("PP","Virtual"),50000);
  products{"Extreme Measures Virtual"}=(50000,25.0,("EM","Virtual"),50000);
  save("products");
}

# EndGameHook(player name who declared,result,result options,player numbers,player names,bet) - This
#   hook is called at the beginning of the game result
#   prosessing. Note: this hook is not called for undecided results.
#

def EndGameHook
{
  if(length(ARG[3])>1)
  {
    push(c);
    push(ready);
    for(p)(ARG[4])
    {
#
# Get tenth anniversary
#
      if(length(promo.booster) <= 0)
      {
        if(net_send(factory.server,(1,"XA","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
#
# Get Fractured Time
#
      if(length(promo.booster2) <= 0)
      {
        if(net_send(factory.server,(1,"FT","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster2=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
#
# Get Reflections
#
      if(length(promo.booster3) <= 0)
      {
        if(net_send(factory.server,(1,"R","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster3=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
#
# Get Archive Portrait
#
      if(length(promo.booster4) <= 0)
      {
        if(net_send(factory.server,(1,"AP","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster4=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
#
# Get Genesis
#
      if(length(promo.booster5) <= 0)
      {
        if(net_send(factory.server,(1,"G","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster5=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
#
# Get Virtual Promo
#
      if(length(promo.booster6) <= 0)
      {
        if(net_send(factory.server,(1,"VP","Booster")))
        {
          ready=0;
          while(!ready)
          {
            c=net_get();
            if(c!=NULL)
            {
              ready=1;
              promo.booster6=shuffle(flatten(toval(c[1])));
            }
          }
        }
      }
      if(users{p}[4][1][0]==0)
      {
         if(count("FT",users{UserWithoutMode(p)}[3][2]))
         {
           c=first(promo.booster2);
           promo.booster2=tail(promo.booster2);
         }
         else if(count("R",users{UserWithoutMode(p)}[3][2]))
         {
           c=first(promo.booster3);
           promo.booster3=tail(promo.booster3);
         }
         else if(count("AP",users{UserWithoutMode(p)}[3][2]))
         {
           c=first(promo.booster4);
           promo.booster4=tail(promo.booster4);
         }
         else if(count("G",users{UserWithoutMode(p)}[3][2]))
         {
           c=first(promo.booster5);
           promo.booster5=tail(promo.booster5);
         }
         else if(count("VP",users{UserWithoutMode(p)}[3][2]))
         {
           c=first(promo.booster6);
           promo.booster6=tail(promo.booster6);
         }
         else
         {
           c=first(promo.booster);
           promo.booster=tail(promo.booster);
         }
         AddCard(p,c);
         SendAll("Message","{blue}"+p+" receives{gold} #"+c+"# {blue}as a reward for the game.");
         if(Con(p)>-1)
           Send(Con(p),("SetCardbook",((c,users{p}[2]{c}),)));
      }
    }
    ready=pop();
    c=pop();
  }
}

