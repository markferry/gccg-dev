#
#  Lotr LCG server
#  ---------------
#
#  Variables:
#
#  Functions:
#

screen.width=1024;
screen.height=768;
port=32011;
meta.port=29114;

# What piles have known order even if not visible.
SELF_KNOWN_PILES=("quest",);

function{"SetScenario"}="SetScenario";

#
# HOOKS
# =====

#
# InitServerHook(nmb.of players) - Called during server initialization.
#
def InitServerHook
{
  for(i)(ARG)
  {
    visible.me[i]{"discard pile"}=1;
    visible.me[i]{"deck"}=0;
    visible.me[i]{"quest"}=0;
    visible.me[i]{"encounter deck"}=0;
    visible.me[i]{"encounter discard"}=1;
    visible.opp[i]{"discard pile"}=1;
    visible.opp[i]{"deck"}=0;
    visible.opp[i]{"quest"}=0;
    visible.opp[i]{"encounter deck"}=0;
    visible.opp[i]{"encounter discard"}=1;
  }
}

#
# GAME SPECIFIC FUNCTIONS
# =======================

#
# SetUpPlayer(p) - Create necessary strucrures for player 'p'.
#
def SetUpPlayer
{
  CreateDeck(ARG,"deck",50,150);
  CreateDeck(ARG,"discard pile",50,290);
  if(ARG==0)
  {
    CreateDeck(ARG,"encounter deck",screen.width-150,0);
    CreateDeck(ARG,"encounter discard",screen.width-50,0);
    CreateDeck(ARG,"quest",screen.width-250,0);
  }
  else
  {
    CreateDeck(ARG,"encounter deck",-1000,0);
    CreateDeck(ARG,"encounter discard",-1000,0);
    CreateDeck(ARG,"quest",-1000,0);
  }
}

#
# InitialScore(p) - Return a structure representing initial score for a player 'p'.
#
def InitialScore
{
  push(s);
  s=(,);
  s{"Threat"}=0;
  return(s);
  s=pop();
}

#
# SetScenario(name,encounter card list,quest card list) - Set up the scenario.
#
def SetScenario
{
  push(c);
  push(q);
  push(e);

  if(length(table) > players*3)
    Reply("{red}Please clear the table before setting the scenario.");
  else
  {
    SendAll("Message","{orange}Setting up scenario: "+ARG[0]);
    q=FindDeck(0,"quest");
    e=FindDeck(0,"encounter deck");
    ClearDeck(0,0,q);
    ClearDeck(0,0,e);
    for(c)(ARG[2])
      Put.DeckTop(c,0,0,q);
    for(c)(ARG[1])
      Put.DeckTop(c,0,0,e);
    ShuffleDeck(e);
  }
  e=pop();
  q=pop();
  c=pop();
}
